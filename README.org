* Your Code as a Crime Scene Notes
** Code Maat repo
#+BEGIN_SRC sh
  cd ~/projects/code-maat/

#+END_SRC

Build with

#+BEGIN_SRC sh
  lein uberjar
#+END_SRC

Run with

#+BEGIN_SRC sh
  java -jar code-maat-1.1-SNAPSHOT-standalone.jar -l logfile.log --version-control git

#+END_SRC
** Chapter 3
*** .mailmap files
Used for handling Authors with name changes in git repos:

[[https://stacktoheap.com/blog/2013/01/06/using-mailmap-to-fix-authors-list-in-git/]]
*** Working git commands
#+BEGIN_SRC sh
  git checkout $(git rev-list --max-count=1 --before="2013-12-01" master)


  git log --numstat


  git log --pretty=format:'[%h] %an %ad %s ' --date=short --numstat --before=2013-12-01 > maat_evo.log
#+END_SRC
*** Revisions analysis
- =number-of-entities= :: the number of "modules in the system"
- =number-of-entities-changed= :: the number of times "different
     modules in the system have been changed"

#+BEGIN_SRC sh
  ./script/maat -l maat_evo.log -c git -a revisions entity,n-revs

#+END_SRC
*** Complexity analysis
Measuring lines of code is a poor measure of complexity, Oram &
Wilson, 2010 /Making Software: What Really Works and Why We Believe
It/

#+BEGIN_SRC sh
  cloc ./ --by-file --csv --quiet
#+END_SRC
*** Saving CSVs
#+BEGIN_SRC sh
  ./script/maat -l maat_evo.log -c git -a revisions > maat_freqs.csv

  cd ../code-maat/
  cloc ./ --by-file --csv --quiet --report-file=~/projects/your-code-as-a-crime-scene/maat_lines.csv
  cd -
#+END_SRC
*** Merging the data complexity and change frequency data

#+BEGIN_SRC sh
  python ~/projects/maat-scripts/merge/merge_comp_freqs.py maat_freqs.csv maat_lines.csv

#+END_SRC
** Chapter 4
Using https://github.com/hibernate/hibernate-orm.

#+BEGIN_SRC sh
  cd ~/projects/hibernate-orm/
  git checkout $(git rev-list -n 1 --before="2013-09-05" master)

  git log --pretty=format:'[%h] %an %ad %s' --date=short \
      --numstat --before=2013-09-05 --after=2012-01-01 > hib_evo.log

  mv hib_evo.log ~/projects/your-code-as-a-crime-scene/hib_evo.log
  cd -

  ./script/maat -l hib_evo.log -c git -a summary

#+END_SRC
*** Choosing a time frame
#+BEGIN_QUOTE
On my projects I choose the following timeframes

- Between releases :: Compare hotspots between releases to evaluate
     your long-term improvements.
- Over iterations :: If you work iteratively, measure between each
     iteration.  This lets you spot code that starts to grow into
     hotspots early.
- Around significant events :: Define the temporal period around
     significant events, such as reorganizations of code or
     personnel.  When you make large redesigns or change the way you
     work, it will reflect in the code.
#+END_QUOTE

- Start with a long period :: 1 to 2 years will allow you to spot
     long-term trends.
*** Hibernate complexity

#+BEGIN_SRC sh

  cd ~/projects/hibernate-orm/
  cloc ./ --by-file --csv --quiet --report-file=~/projects/your-code-as-a-crime-scene/hib_lines.csv
  cd -

#+END_SRC
*** Hibernate change frequencies

#+BEGIN_SRC sh
  ./script/maat -l hib_evo.log -c git -a revisions > hib_freqs.csv

#+END_SRC
*** Merging the hibernate data

#+BEGIN_SRC sh
  python ~/projects/maat-scripts/merge/merge_comp_freqs.py hib_freqs.csv hib_lines.csv

#+END_SRC
*** Visualization samples directory

#+BEGIN_SRC sh

  ~/projects/code-maat-samples
#+END_SRC
*** Serving the goods
#+BEGIN_SRC sh
  python -m SimpleHTTPServer 8888
  open http://localhost:8888/hibernate/hibzoomable.html

#+END_SRC
*** Enclosure diagrams
Uses /circle packing/ to represent the system.  Each circle is a
module, from hibernate core all the way down to individual namespaces.
*Circle radius* denotes the lines of code contained in the modules
dependent on the module the circle represents.  *Color intensity* of
the module denotes the number of revisions.

It looks like directories are blue and =.java= files are red.
*** Individual coding styles affect hotspots
#+BEGIN_QUOTE
A project's success depends on the coding skills of the people
involved.  As humans we vary a lot in our capabilities.  A cognitively
demanding task like programming amplifies those variations.  That's
one reason why there's a large difference in quality between the code
of different programmers, even on the same team.  Given these
differences, it is hardly surprising that the expertise and coding
techniques of individual developers make up one reason for clusters of
hotspots.
#+END_QUOTE
*** Specialization
If one developer is designing all the modules in one area then there
will be hotspots in that area over a given time.  "This may be one
reason why hotspots attract each other."
*** Strategic decisions
Running up deliberate technical debt to meet a deadline.
*** Lack of knowledge
There may be a lack of knowledge in the team that is working on this
part of the codebase.

There may be an opportunity to get training for the team or shuffle
roles to add coverage to a blind spot
*** Does measuring code change improve fault prediction?
by Robert Bell, Thomas Ostrand, and Elaine Weyuker

http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.281.7784&rep=rep1&type=pdf
*** Different features stabilize at different rates
"Change patterns suggest new modular boundaries"

Consider a namespace with three functions.  Two of those functions
depend on several other namespaces.  One function is self-contained.
The namespace undergoes changes whenever the two dependent functions
change and the self-contained function comes along for the ride.  A
naive developer could accidentally change the self-contained function
because they are looking at the namespace, when in fact they should
only be concerned with changing the dependent functions.

Or the example from the book:

#+BEGIN_QUOTE
[Code Maat's] =app.clj= module has changed several times, each time
for different reasons.  It has three responsibilities, and therefore
three reasons to change.  Refactoring this module into three
independent ones would isolate the responsibilities and stabilize the
code.
#+END_QUOTE

It may or may not stabilize the code, but at least it would allow the
three refactored namespaces to evolve at rates consistent with the
dependent namespaces for which they are responsible.
*** Visualizing hibernate data
#+BEGIN_SRC sh
  python ~/projects/maat-scripts/transform/csv_as_enclosure_json.py --structure hib_lines.csv --weights hib_freqs.csv --weightcolumn 1 > hib_hotspot.json

#+END_SRC
