* Your Code as a Crime Scene Notes
** Code Maat repo
#+BEGIN_SRC sh
  cd ~/projects/code-maat/

#+END_SRC

Build with

#+BEGIN_SRC sh
  lein uberjar
#+END_SRC

Run with

#+BEGIN_SRC sh
  java -jar code-maat-1.1-SNAPSHOT-standalone.jar -l logfile.log --version-control git

#+END_SRC
** Chapter 3
*** .mailmap files
Used for handling Authors with name changes in git repos:

[[https://stacktoheap.com/blog/2013/01/06/using-mailmap-to-fix-authors-list-in-git/]]
*** Working git commands
#+BEGIN_SRC sh
  git checkout `git rev-list --max-count=1 --before="2013-12-01" master`


  git log --numstat


  git log --pretty=format:'[%h] %an %ad %s ' --date=short --numstat --before=2013-12-01 > maat_evo.log
#+END_SRC
*** Revisions analysis
#+BEGIN_SRC sh
  ./script/maat -l maat_evo.log -c git -a revisions entity,n-revs

#+END_SRC
*** Complexity analysis
Measuring lines of code is a poor measure of complexity, Oram &
Wilson, 2010 /Making Software: What Really Works and Why We Believe
It/

#+BEGIN_SRC sh
  cloc ./ --by-file --csv --quiet
#+END_SRC
*** Saving CSVs
#+BEGIN_SRC sh
  ./script/maat -l maat_evo.log -c git -a revisions > maat_freqs.csv

  cd ../code-maat/
  cloc ./ --by-file --csv --quiet --report-file=~/projects/your-code-as-a-crime-scene/maat_lines.csv
  cd -
#+END_SRC
*** Merging the data complexity and change frequency data

#+BEGIN_SRC sh
  python ~/projects/maat-scripts/merge/merge_comp_freqs.py maat_freqs.csv maat_lines.csv

#+END_SRC
** Chapter 4
